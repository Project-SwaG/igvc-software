#include "transformer.h"
#include <stdio.h>


using namespace std;

transformer::transformer(Event<ImageData> &evtSrc)
    :LonImageEvent(this)
{
    evtSrc += &LonImageEvent;
    //TODO here put in the coordinates of pc1-pc2
    //As measured in real life
<<<<<<< HEAD
    int offset = 0; //20
    pcam = (cv::Mat_<float>(4,2) << offset-12,72, offset, 72, offset, 60,offset -12, 60);
    //pcam = pcam*3+450;
    //cout<< pcam << endl;

    //    430, 642
    //    513, 642
    //    513, 588
    //    430, 588
=======
    /// (x1, x2, x3, y1, y2, y3, 1 1 1)

    pcam = (cv::Mat_<float>(2,2) << 427, 511, 642, 642);
    cout<< pcam << endl;
>>>>>>> b4a855f43b8d3bf61812839781676aa0cdb5e267

//    427, 642
//    515, 642
//    512, 589
//    432, 588
<<<<<<< HEAD

    p = (cv::Mat_<float>(4,2) << 427, 642, 515, 642, 512, 589, 432, 588);
\
    transformMat = cv::getPerspectiveTransform(p, pcam);//cv::findHomography(cv::Mat(p), cv::Mat(pcam));
=======
    //TODO here put in the coordinates of p1-p2
    //which you will get from gimp.
    p = (cv::Mat_<float>(2,2) << 427, 515, 642, 642);
    cv::Mat pcamInv = pcam.inv(cv::DECOMP_LU);
    transformMat = p*pcamInv;
    transformMat = abs(transformMat);
>>>>>>> b4a855f43b8d3bf61812839781676aa0cdb5e267
    cout<<transformMat<<endl;
}

void transformer::onImageEvent(ImageData imgd){
    src = imgd.mat();

<<<<<<< HEAD
    cv::warpPerspective(src, dst, transformMat, dst.size());

     pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);

     // Fill in the cloud data
     cloud->width  = 15;
     cloud->height = 1;
     cloud->points.resize (cloud->width * cloud->height);

     // Generate the data
     for (size_t i = 0; i < cloud->points.size (); ++i)
     {
       cloud->points[i].x = 1024 * rand () / (RAND_MAX + 1.0f);
       cloud->points[i].y = 1024 * rand () / (RAND_MAX + 1.0f);
       cloud->points[i].z = 1.0;
     }

     // Set a few outliers
     cloud->points[0].z = 2.0;
     cloud->points[3].z = -2.0;
     cloud->points[6].z = 4.0;
=======
    cv::Mat dim = (cv::Mat_<float>(2,1)<< src.cols, src.rows);

    dim = transformMat*dim;


    dst = cv::Mat( (int) dim.at<float>(1,0)+1, (int) dim.at<float>(0,0)+1, CV_8UC3);
    cv::Mat newLoc(2,1, CV_32F);

    for(int r=0; r<src.rows; r++){
        for (int c=0; c<src.cols; c++){
            newLoc.at<float>(0,0) = c;
            newLoc.at<float>(1,0) = r;
            newLoc = transformMat*newLoc;
            dst.at<cv::Vec3b>((int)newLoc.at<float>(1,0),(int) newLoc.at<float>(0,0)) = src.at<cv::Vec3b>(r,c);

        }
    }
>>>>>>> b4a855f43b8d3bf61812839781676aa0cdb5e267
    onNewLines(ImageData(dst));

}


